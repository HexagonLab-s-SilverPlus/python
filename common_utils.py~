import base64
import jwt
import logging
from functools import wraps
from flask import request, jsonify, g
import os
import requests
from dotenv import load_dotenv

log = logging.getLogger(__name__)

# 로깅 초기화
def init_logging():
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    return logger

init_logging()

# 환경 변수 로드
load_dotenv()
SECRET_KEY_BASE64 = os.getenv("JWT_SECRET_KEY")
SECRET_KEY = base64.b64decode(SECRET_KEY_BASE64)
SPRING_BOOT_API_URL = os.getenv("SPRING_BOOT_API_URL")

def decode_jwt(token):
    try:
        return jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
    except jwt.ExpiredSignatureError:
        raise ValueError("Token has expired")
    except jwt.InvalidTokenError:
        raise ValueError("Invalid token")


def refresh_access_token(refresh_token, access_token):
    url = f"{SPRING_BOOT_API_URL}/reissue"
    headers = {
        'Authorization': f'Bearer {access_token}',
        'RefreshToken': refresh_token,
        'extendLogin': 'true'
    }
    response = requests.post(url, headers=headers)
    if response.status_code == 200:
        new_access = response.headers.get("Authorization", "").split(" ")[1]
        new_refresh = response.headers.get("RefreshToken", "").split(" ")[1]
        return new_access, new_refresh
    else:
        log.error(f"Failed to refresh tokens: {response.text}")
        return None, None


def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization', '').replace("Bearer ", "")
        refresh_token = request.headers.get("RefreshToken", "")

        if not token or not refresh_token:
            return jsonify({'message': 'Tokens are missing!'}), 401

        try:
            data = decode_jwt(token)
            g.access_token = token
            g.refresh_token = refresh_token
        except ValueError as e:
            if "expired" in str(e):
                new_access_token, new_refresh_token = refresh_access_token(refresh_token, token)
                if not new_access_token:
                    return jsonify({'message': 'Failed to refresh tokens'}), 401
                g.access_token = new_access_token
                g.refresh_token = new_refresh_token
            else:
                return jsonify({'message': 'Invalid token'}), 401

        return f(*args, **kwargs)
    return decorated
